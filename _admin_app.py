import os
import streamlit as st
import pandas as pd
import yfinance as yf
import unicodedata
import numpy as np
from datetime import date, timedelta, datetime as dt
import pytz # Importa√ß√£o adicionada para lidar com fusos hor√°rios

# --- Configura√ß√µes Iniciais da Aplica√ß√£o ---
st.set_page_config(page_title="üìà An√°lise de Pre√ßos Semanais - BOV2025", layout="wide")
st.title("üìà An√°lise de Pre√ßos Semanais - BOV2025")

EXCEL_PATH = "BOV2025_Analise_Completa_B.xlsx"
SHEET_NAME_STOCKS = "Streamlit" # Aba para a√ß√µes da B3
SHEET_NAME_CRYPTO = "Criptos" # Aba para criptomoedas
SHEET_NAME_ETFS = "ETF" # Aba para ETFs
SHEET_NAME_FIIS = "FII" # Nova aba para FIIs

HIDDEN_FILES = ["hidden_cols.txt", "hidden_col.txt"]
DEFAULT_TICKERS_FILE = "default_tickers.txt" # Novo arquivo para tickers padr√£o

# --- Fun√ß√µes de Carregamento e Busca de Dados ---

@st.cache_data(ttl=300)
def carregar_planilha(path: str, aba: str) -> pd.DataFrame:
    """
    Carrega os dados de uma planilha Excel e normaliza os nomes das colunas.
    Remove colunas vazias e n√£o nomeadas.
    """
    df = pd.read_excel(path, sheet_name=aba)
    df.columns = [unicodedata.normalize('NFC', str(col).strip()) for col in df.columns]
    df = df.dropna(axis=1, how="all")
    df = df.loc[:, ~df.columns.str.startswith("Unnamed:")]
    return df

@st.cache_data(ttl=3600)
def get_price_var_min_max_last(ticker_yf: str):
    """
    Busca dados de cota√ß√£o usando yfinance, calcula varia√ß√£o,
    m√≠nima/m√°xima de sextas-feiras e fechamento mais recente.
    Ajustado para lidar com fuso hor√°rio de S√£o Paulo.
    Tamb√©m retorna o hist√≥rico bruto para depura√ß√£o.
    """
    try:
        ticker_data = yf.Ticker(ticker_yf)
        tz_sp = pytz.timezone('America/Sao_Paulo') # Fuso hor√°rio para o mercado brasileiro
        now_sp = dt.now(tz_sp)
        end_date_yf = now_sp.date() + timedelta(days=1) # Garante que o dia atual seja inclu√≠do

        hist = ticker_data.history(start="2024-06-01", end=end_date_yf)
        # Filtra explicitamente para garantir que os dados comecem em 2024-06-01
        hist = hist[hist.index.date >= date(2024, 6, 1)]

        if hist.empty:
            return None, None, None, None, None, pd.DataFrame()

        # Calcula a cota√ß√£o atual e a varia√ß√£o di√°ria
        recent = hist.tail(2)
        if len(recent) >= 2:
            close_today = round(recent["Close"].iloc[-1], 2)
            close_yesterday = recent["Close"].iloc[-2]
            var = round(((close_today - close_yesterday) / close_yesterday) * 100, 2)
        elif len(recent) == 1:
            close_today = round(recent["Close"].iloc[-1], 2)
            var = None
        else:
            close_today = None
            var = None

        # Filtra os dados apenas para sextas-feiras (dia da semana 4)
        sextas = hist[hist.index.weekday == 4]
        min_sexta = round(sextas["Close"].min(), 2) if not sextas.empty else None
        max_sexta = round(sextas["Close"].max(), 2) if not sextas.empty else None
        fechamento_mais_recente = round(sextas["Close"].iloc[-1], 2) if not sextas.empty else None

        return close_today, var, min_sexta, max_sexta, fechamento_mais_recente, hist
    except Exception as e:
        print(f"Erro ao buscar dados para {ticker_yf}: {e}")
        return None, None, None, None, None, pd.DataFrame()

@st.cache_data(ttl=600) # Cache por 10 minutos
def get_index_data(ticker_yf: str):
    """
    Busca dados de pre√ßo atual e varia√ß√£o di√°ria para um ticker de √≠ndice.
    """
    try:
        ticker_data = yf.Ticker(ticker_yf)
        hist = ticker_data.history(period="2d") # Pega os √∫ltimos 2 dias para calcular a varia√ß√£o
        if hist.empty:
            return None, None
        
        close_today = round(hist["Close"].iloc[-1], 2)
        if len(hist) >= 2:
            close_yesterday = hist["Close"].iloc[-2]
            if close_yesterday != 0:
                var = round(((close_today - close_yesterday) / close_yesterday) * 100, 2)
            else:
                var = None
        else:
            var = None
        return close_today, var
    except Exception as e:
        print(f"Erro ao buscar dados para o √≠ndice {ticker_yf}: {e}")
        return None, None


# --- Fun√ß√µes de C√°lculo e An√°lise ---

def calcular_sr(row):
    """Calcula os pontos de suporte e resist√™ncia (SR)."""
    H = row.get("M√°xima sexta desde jun/24")
    L = row.get("M√≠nima sexta desde jun/24")
    C = row.get("Fechamento mais recente")
    if pd.notnull(H) and pd.notnull(L) and pd.notnull(C):
        P = (H + L + C) / 3
        return pd.Series([round(L - 2*(H-P), 2), round(P-(H-L), 2), round(2*P-H, 2), round(P, 2), round(2*P-L, 2), round(P+(H-L), 2), round(H+2*(P-L), 2)])
    return pd.Series([None]*7)

def encontrar_valores_proximos(row):
    """Encontra os n√≠veis de suporte/resist√™ncia mais pr√≥ximos da cota√ß√£o atual."""
    preco = row.get("Cota√ß√£o atual")
    niveis = [row.get(k) for k in ["S3","S2","S1","P","R1","R2","R3"] if pd.notnull(row.get(k))]
    niveis.sort()
    abaixo = max([v for v in niveis if v<=preco], default=None)
    acima = min([v for v in niveis if v>preco], default=None)
    return pd.Series([abaixo,acima])

def calcular_distancia_percentual(row):
    """Calcula a menor dist√¢ncia percentual da cota√ß√£o atual para o n√≠vel mais pr√≥ximo."""
    preco = row.get("Cota√ß√£o atual")
    abaixo = row.get("N√≠vel abaixo")
    acima = row.get("N√≠vel acima")
    d1 = abs((preco-abaixo)/preco)*100 if pd.notnull(abaixo) and preco != 0 else None
    d2 = abs((acima-preco)/preco)*100 if pd.notnull(acima) and preco != 0 else None
    return round(min([d for d in [d1,d2] if d is not None], default=None), 2) if d1 is not None or d2 is not None else None

def encontrar_var_faixa(row, k_values_list): # Renomeado k_cols para k_values_list para clareza
    """Encontra a faixa de varia√ß√£o (K) em que a varia√ß√£o atual se encaixa."""
    var = row.get("Var")
    arr = sorted([v for v in k_values_list if pd.notnull(v)]) # Agora espera valores, n√£o nomes de coluna
    if pd.notnull(var) and arr:
        aba = max([v for v in arr if v<=var], default=None)
        ac = min([v for v in arr if v > var], default=None)
        return pd.Series([aba,ac])
    return pd.Series([None, None])


def prever_alvo(row, last_cols, last_dates, next_friday):
    """Prev√™ o valor alvo usando regress√£o linear simples."""
    ys = [row[c] for c in last_cols]
    # Garante que h√° pelo menos dois pontos de dados v√°lidos para polyfit
    valid_indices = [i for i, y in enumerate(ys) if pd.notnull(y)]
    if len(valid_indices) < 2:
        return None

    valid_ys = [ys[i] for i in valid_indices]
    valid_xs = [last_dates[i].toordinal() for i in valid_indices]

    if len(valid_xs) < 2: # Verifica novamente ap√≥s filtrar por dados v√°lidos
        return None

    m, b = np.polyfit(valid_xs, valid_ys, 1)
    return round(m * next_friday.toordinal() + b, 2)

# --- FUN√á√ÉO MODIFICADA: highlight_colunas_comparadas ---
def highlight_colunas_comparadas(row, colunas_para_estilo):
    """
    Aplica estilo de cor (verde/vermelho) √†s colunas de cota√ß√£o
    com base na compara√ß√£o com o valor anterior.
    VERDE: se for maior OU IGUAL ao anterior.
    VERMELHO: se for menor ao anterior.
    """
    vals = row[colunas_para_estilo].values
    styles = [''] * len(vals)
    for i in range(1, len(vals)):
        ant = vals[i-1]
        atual = vals[i]

        if pd.notnull(ant) and pd.notnull(atual):
            if atual >= ant: # ALTERADO: Condi√ß√£o para verde agora √© maior OU IGUAL
                styles[i] = 'color: green; font-weight: bold'
            elif atual < ant:
                styles[i] = 'color: red; font-weight: bold'
            # Else (atual == ant, mas j√° coberto pelo >=), style permanece '' se n√£o for menor.
    return styles

# --- FUN√á√ÉO calculate_consecutive_growth (SEM ALTERA√á√ïES, pois j√° conta crescimento ESTITRO para "N√≠vel") ---
def calculate_consecutive_growth(row, static_date_cols, current_quote_col):
    """
    Calcula o n√∫mero de semanas consecutivas de crescimento (fonte verde),
    contando da cota√ß√£o mais recente para a mais antiga.
    A "Cota√ß√£o atual" s√≥ estende a sequ√™ncia se for estritamente maior que a √∫ltima data est√°tica.
    Caso contr√°rio, a contagem considera apenas as datas est√°ticas.
    """
    all_relevant_values = []
    for col in static_date_cols:
        val = row.get(col)
        all_relevant_values.append(val if pd.notnull(val) else np.nan)

    current_quote = row.get(current_quote_col)

    values_for_streak = []

    if len(all_relevant_values) > 0 and pd.notnull(current_quote):
        last_static_value = all_relevant_values[-1]
        if pd.notnull(last_static_value) and current_quote > last_static_value:
            values_for_streak = all_relevant_values + [current_quote]
        else:
            values_for_streak = all_relevant_values
    else:
        values_for_streak = all_relevant_values

    if len(values_for_streak) < 2:
        return 0

    consecutive_growth_count = 0
    for i in range(len(values_for_streak) - 1, 0, -1):
        curr_val = values_for_streak[i]
        prev_val = values_for_streak[i-1]

        if pd.isna(curr_val) or pd.isna(prev_val):
            break
        elif curr_val > prev_val: # AQUI A CONDI√á√ÉO √â AINDA ESTRICTA, como solicitado para o "N√≠vel" anterior
            consecutive_growth_count += 1
        else:
            break

    return consecutive_growth_count

def load_default_tickers(file_path: str, all_options: list) -> list:
    """
    Carrega tickers padr√£o de um arquivo de texto, filtrando pelos tickers dispon√≠veis.
    """
    default_tickers = []
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                # Filtra e normaliza os tickers lidos do arquivo
                loaded_tickers = [unicodedata.normalize('NFC', line.strip()) for line in f if line.strip()]
                # Retorna apenas os tickers que existem nas op√ß√µes dispon√≠veis
                default_tickers = [t for t in loaded_tickers if t in all_options]
        except Exception as e:
            st.warning(f"Erro ao carregar tickers padr√£o do arquivo '{file_path}': {e}")
    return default_tickers

def calculate_historical_spread(hist_data: pd.DataFrame):
    """
    Calcula o 'Spread (%)' para cada dia no hist√≥rico de dados.
    H, L, C (m√°xima sexta, m√≠nima sexta, fechamento mais recente)
    s√£o calculados dinamicamente com base nos dados at√© o dia atual.
    """
    if hist_data.empty:
        return pd.Series(dtype=float)

    historical_spreads = []
    # Garante que o √≠ndice √© datetime para f√°cil filtragem
    hist_data.index = pd.to_datetime(hist_data.index)

    # Definir chaves para reutiliza√ß√£o
    sr_keys = ["S3","S2","S1","P","R1","R2","R3"]
    nearest_level_keys = ["N√≠vel abaixo", "N√≠vel acima"]
    var_faixa_keys = ["Var (abaixo)", "Var (acima)"] # Adicionado para clareza

    for i in range(len(hist_data)):
        current_date = hist_data.index[i]
        
        # Filtra o hist√≥rico at√© a data atual
        daily_hist = hist_data.loc[hist_data.index <= current_date]

        # Calcula H, L, C dinamicamente para o contexto deste dia
        sextas_up_to_date = daily_hist[daily_hist.index.weekday == 4]
        
        H_D = round(sextas_up_to_date["Close"].max(), 2) if not sextas_up_to_date.empty else None
        L_D = round(sextas_up_to_date["Close"].min(), 2) if not sextas_up_to_date.empty else None
        
        # C_D √© o fechamento da √∫ltima sexta-feira at√© a data atual
        C_D = round(sextas_up_to_date["Close"].iloc[-1], 2) if not sextas_up_to_date.empty else None

        # Pre√ßo de fechamento e varia√ß√£o do dia atual
        Preco_D = round(daily_hist["Close"].iloc[-1], 2)
        Var_D = None
        if len(daily_hist) >= 2:
            prev_close = daily_hist["Close"].iloc[-2]
            if prev_close != 0:
                Var_D = round(((Preco_D - prev_close) / prev_close) * 100, 2)

        # Cria uma linha tempor√°ria para reutilizar as fun√ß√µes de c√°lculo de SR
        temp_row = {
            "M√°xima sexta desde jun/24": H_D,
            "M√≠nima sexta desde jun/24": L_D,
            "Fechamento mais recente": C_D,
            "Cota√ß√£o atual": Preco_D,
            "Var": Var_D
        }
        temp_row_series = pd.Series(temp_row)

        # Calcula os pontos SR e atribui √† temp_row_series
        sr_points = calcular_sr(temp_row_series)
        for j, key in enumerate(sr_keys):
            if j < len(sr_points):
                temp_row_series[key] = sr_points.iloc[j]

        # Encontra os n√≠veis mais pr√≥ximos e atribui √† temp_row_series
        nearest_levels = encontrar_valores_proximos(temp_row_series)
        for j, key in enumerate(nearest_level_keys):
            if j < len(nearest_levels):
                temp_row_series[key] = nearest_levels.iloc[j]

        # Calcula Delta (Dist√¢ncia Percentual)
        delta = calcular_distancia_percentual(temp_row_series)
        temp_row_series["Delta"] = delta

        # Calcula Amplitude
        amplitude = None
        if pd.notnull(temp_row_series.get("N√≠vel abaixo")) and temp_row_series.get("N√≠vel abaixo") != 0 and pd.notnull(temp_row_series.get("N√≠vel acima")):
            amplitude = round(((temp_row_series.get("N√≠vel acima")/temp_row_series.get("N√≠vel abaixo")-1)*100), 2)
        temp_row_series["Amplitude"] = amplitude

        # Calcula K_cols
        k_div = [-2,-3,-5,-9,-17,-33,-65,65,33,17,9,5,3,2]
        k_values = [round(amplitude/k, 2) if pd.notnull(amplitude) else None for k in k_div]
        
        # Encontra Var (abaixo) e Var (acima) e atribui √† temp_row_series
        var_faixa = encontrar_var_faixa(temp_row_series, k_values)
        for j, key in enumerate(var_faixa_keys): # Usando as chaves explicitamente
            if j < len(var_faixa):
                temp_row_series[key] = var_faixa.iloc[j]

        # Calcula Spread (%)
        spread = None
        if pd.notnull(temp_row_series.get("Var (abaixo)")) and pd.notnull(temp_row_series.get("Var (acima)")):
            spread = round(temp_row_series.get("Var (acima)") - temp_row_series.get("Var (abaixo)"), 2)
        
        historical_spreads.append(spread)
    
    return pd.Series(historical_spreads, index=hist_data.index, name="Historical_Spread_Pct")


# --- Fun√ß√£o Principal de Processamento e Exibi√ß√£o de Dados ---

def process_and_display_data(sheet_name: str, asset_type_display_name: str):
    """
    Fun√ß√£o auxiliar para processar e exibir os dados para um tipo de ativo espec√≠fico,
    reduzindo a duplica√ß√£o de c√≥digo.
    """
    df = carregar_planilha(EXCEL_PATH, sheet_name)

    # Verifica se o DataFrame carregado est√° vazio
    if df.empty:
        st.info(f"A planilha '{sheet_name}' para {asset_type_display_name} est√° vazia ou n√£o p√¥de ser carregada. Por favor, verifique o arquivo Excel.")
        st.dataframe(pd.DataFrame()) # Exibe um DataFrame vazio
        return # Sai da fun√ß√£o se n√£o houver dados

    hidden_cols_raw = []
    for fname in HIDDEN_FILES:
        if os.path.exists(fname):
            with open(fname, "r", encoding="utf-8") as f:
                hidden_cols_raw = [line.strip() for line in f if line.strip()]
            break
    hidden_cols = [unicodedata.normalize('NFC', h) for h in hidden_cols_raw]

    if "Ticker" not in df.columns:
        st.warning(f"A coluna 'Ticker' n√£o foi encontrada na planilha '{sheet_name}'. Certifique-se de que a coluna existe e est√° nomeada corretamente.")
        st.dataframe(pd.DataFrame()) # Exibe um DataFrame vazio
        return # Sai da fun√ß√£o se n√£o houver coluna Ticker

    # L√≥gica de formata√ß√£o do Ticker para yFinance
    df["Ticker_YF"] = df["Ticker"].astype(str).str.strip()
    # Adiciona .SA apenas para a√ß√µes, ETFs e FIIs
    if asset_type_display_name in ["A√ß√µes", "ETFs", "FIIs"]:
        df["Ticker_YF"] = df["Ticker_YF"] + ".SA"
    # Para criptos com -USD, o ticker j√° est√° no formato correto e n√£o h√° convers√£o para BRL.

    # Aplica a fun√ß√£o para obter os dados do yfinance
    df[[
        "Cota√ß√£o atual",
        "Var",
        "M√≠nima sexta desde jun/24",
        "M√°xima sexta desde jun/24",
        "Fechamento mais recente",
        "Raw_Hist_Data"
    ]] = df["Ticker_YF"].apply(lambda t: pd.Series(get_price_var_min_max_last(t)))

    # --- Aplica√ß√£o dos c√°lculos de Suporte/Resist√™ncia e outros indicadores ---
    df[["S3","S2","S1","P","R1","R2","R3"]] = df.apply(calcular_sr, axis=1)
    df[["N√≠vel abaixo","N√≠vel acima"]] = df.apply(encontrar_valores_proximos, axis=1)
    df.rename(columns={"Dist√¢ncia percentual": "Delta"}, inplace=True)
    df["Delta"] = df.apply(calcular_distancia_percentual, axis=1)
    df["Amplitude"] = df.apply(lambda r: round(((r.get("N√≠vel acima")/r.get("N√≠vel abaixo")-1)*100), 2) if pd.notnull(r.get("N√≠vel abaixo")) and r.get("N√≠vel abaixo")!=0 else None, axis=1)

    k_div = [-2,-3,-5,-9,-17,-33,-65,65,33,17,9,5,3,2]
    k_cols = [f"K ({k})" for k in k_div]
    df[k_cols] = df["Amplitude"].apply(lambda amp: pd.Series([round(amp/k, 2) if pd.notnull(amp) else None for k in k_div]))

    # CORRE√á√ÉO APLICADA AQUI: Passa os valores das colunas K, n√£o os nomes das colunas
    df[["Var (abaixo)","Var (acima)"]] = df.apply(lambda row: encontrar_var_faixa(row, [row[c] for c in k_cols]), axis=1)
    df["Spread (%)"] = df.apply(lambda r: round(r.get("Var (acima)")-r.get("Var (abaixo)"), 2) if pd.notnull(r.get("Var (abaixo)")) and pd.notnull(r.get("Var (acima)")) else None, axis=1)

    date_cols = [c for c in df.columns if c[:4].isdigit() and "-" in c]
    for c in date_cols: df[c] = pd.to_numeric(df[c],errors="coerce")

    today = date.today()
    wd = today.weekday()
    offset = (4 - wd) % 7
    offset = offset if offset != 0 else 7
    next_friday = today + timedelta(days=offset)

    # Garante que h√° colunas de data suficientes para a predi√ß√£o, caso contr√°rio, pula o c√°lculo de Alvo
    if len(date_cols) >= 4: # Precisa de pelo menos 4 para last_cols[-4:]
        last_cols = date_cols[-4:]
        last_dates = []
        for col in last_cols:
            try:
                d = dt.fromisoformat(str(col))
            except ValueError:
                    d = pd.to_datetime(col)
            last_dates.append(d.date())
        df['Alvo'] = df.apply(lambda row: prever_alvo(row, last_cols, last_dates, next_friday), axis=1)
    else:
        df['Alvo'] = None # Define Alvo como None se n√£o houver dados hist√≥ricos suficientes para a predi√ß√£o
        st.warning(f"N√£o h√° colunas de data suficientes na planilha '{sheet_name}' para o c√°lculo do 'Alvo' (m√≠nimo de 4 colunas de data necess√°rias).")


    # --- C√°lculo do N√≠vel ---
    static_price_cols_for_growth = sorted([c for c in df.columns if c[:4].isdigit() and "-" in c])[-5:]

    df['N√≠vel'] = df.apply(
        lambda row: calculate_consecutive_growth(row, static_price_cols_for_growth, "Cota√ß√£o atual"), axis=1
    )

    # Filtro de ticker e exibi√ß√£o do DataFrame
    opt = df["Ticker"].unique().tolist()
    
    # Carrega os tickers padr√£o para a aba atual
    default_selected = load_default_tickers(DEFAULT_TICKERS_FILE, opt)

    sel = st.multiselect(f"Filtrar por Ticker ({asset_type_display_name}):", options=opt, default=default_selected, key=f"multiselect_{asset_type_display_name}")
    
    # Se nenhum ticker for selecionado, o DataFrame pode se tornar vazio.
    # Adiciona uma verifica√ß√£o expl√≠cita aqui para lidar com isso.
    if sel:
        df = df[df["Ticker"].isin(sel)]
    
    if df.empty:
        st.info(f"Nenhum Ticker selecionado ou nenhum dado dispon√≠vel para a aba '{asset_type_display_name}'.")
        st.dataframe(pd.DataFrame()) # Exibe um DataFrame vazio
        return # Sai da fun√ß√£o

    ocultar = [col for col in hidden_cols if col in df.columns] + ["Raw_Hist_Data"] if hidden_cols else ["Raw_Hist_Data"]
    # Garante que a nova coluna n√£o seja ocultada por padr√£o
    if 'N√≠vel' in ocultar:
        ocultar.remove('N√≠vel')

    display_df = df.drop(columns=ocultar, errors="ignore")

    # Verifica se display_df est√° vazio ap√≥s a remo√ß√£o de colunas
    if display_df.empty:
        st.info(f"Nenhum dado para exibir na aba '{asset_type_display_name}' ap√≥s a remo√ß√£o de colunas. Por favor, verifique a planilha ou as colunas ocultas.")
        st.dataframe(pd.DataFrame()) # Exibe um DataFrame vazio
        return # Sai da fun√ß√£o

    cols = list(display_df.columns)
    # Reordena as colunas para exibir "Cota√ß√£o atual" ap√≥s "Ticker_YF"
    if "Ticker_YF" in cols and "Cota√ß√£o atual" in cols:
        cols.remove("Cota√ß√£o atual"); i = cols.index("Ticker_YF"); cols.insert(i+1,"Cota√ß√£o atual")
        # Inserir 'N√≠vel' ap√≥s 'Cota√ß√£o atual'
        if 'N√≠vel' in cols:
            cols.remove('N√≠vel')
            idx_cotacao_atual = cols.index("Cota√ß√£o atual")
            cols.insert(idx_cotacao_atual + 1, "N√≠vel")
        display_df = display_df[cols]
    elif 'N√≠vel' in cols:
        pass # A coluna j√° estar√° na exibi√ß√£o, n√£o precisa de reordena√ß√£o espec√≠fica

    fmt = {col: "{:.2f}" for col in display_df.select_dtypes(include=[np.number]).columns}
    # Formata a nova coluna como inteiro, pois √© um n√≠vel de 0 a 5
    if 'N√≠vel' in fmt:
        fmt['N√≠vel'] = "{:.0f}"

    display_df.columns = [str(c) for c in display_df.columns]
    date_cols_fmt = [c for c in display_df.columns if c[:4].isdigit() and "-" in c]
    # Garante que pegamos no m√°ximo as √∫ltimas 5, mas lida graciosamente com menos de 5
    if len(date_cols_fmt) > 5:
        date_cols_fmt = sorted(date_cols_fmt)[-5:]
    else:
        date_cols_fmt = sorted(date_cols_fmt) # Ordena todas se houver menos de 5
    
    # Garante que colunas_para_estilo seja sempre definida, mesmo que vazia
    colunas_para_estilo = []
    if "Cota√ß√£o atual" in display_df.columns:
        colunas_para_estilo = date_cols_fmt + ["Cota√ß√£o atual"]
    else:
        colunas_para_estilo = date_cols_fmt

    # Aplica estiliza√ß√£o somente se houver colunas para estilizar e o DataFrame n√£o estiver vazio
    if not display_df.empty and colunas_para_estilo:
        styled = display_df.style.format(fmt)
        styled = styled.apply(lambda row: highlight_colunas_comparadas(row, colunas_para_estilo), axis=1, subset=colunas_para_estilo)
        st.dataframe(styled)
    else:
        # Se n√£o houver colunas para estilizar ou o DataFrame estiver vazio, exibe sem estiliza√ß√£o condicional
        st.dataframe(display_df.style.format(fmt))

    # Se√ß√£o de Depura√ß√£o de Dados de Sexta-feira
    st.subheader(f"üõ†Ô∏è Hist√≥rico de Dados de Sexta-feira ({asset_type_display_name})")
    debug_friday_data = st.checkbox(f"Exibir dados brutos de Sexta-feira para depura√ß√£o ({asset_type_display_name}) (selecione apenas um Ticker)", key=f"debug_friday_{asset_type_display_name}")

    if debug_friday_data and len(sel) == 1:
        ticker_to_debug_base = sel[0]
        selected_row = df[df["Ticker"] == ticker_to_debug_base]
        if not selected_row.empty and "Raw_Hist_Data" in selected_row.columns:
            hist_data = selected_row["Raw_Hist_Data"].iloc[0]
            if hist_data is not None and not hist_data.empty:
                sextas_debug = hist_data[hist_data.index.weekday == 4]
                if not sextas_debug.empty:
                    st.write(f"Cota√ß√µes de Fechamento de Sexta-feira para {sel[0]} desde 2024-06-01:")
                    st.dataframe(sextas_debug[["Close"]])
                    st.write(f"M√≠nima calculada a partir desses dados: {round(sextas_debug['Close'].min(), 2)}")
                    st.write(f"M√°xima calculada a partir desses dados: {round(sextas_debug['Close'].max(), 2)}")
                    st.write(f"Data m√≠nima no hist√≥rico completo (ap√≥s filtro): {hist_data.index.min().date()}")
                    st.write(f"Data m√°xima no hist√≥rico completo (ap√≥s filtro): {hist_data.index.max().date()}")
                else:
                    st.info(f"Nenhum dado de sexta-feira encontrado para {sel[0]} no per√≠odo.")
            else:
                st.warning(f"Dados hist√≥ricos para {sel[0]} n√£o dispon√≠veis ou vazios para depura√ß√£o. Tente recarregar a p√°gina.")
        else:
            st.warning(f"Dados hist√≥ricos para {sel[0]} n√£o dispon√≠veis para depura√ß√£o. Tente recarregar a p√°gina.")
    elif debug_friday_data and len(sel) != 1:
        st.info("Por favor, selecione exatamente um Ticker para exibir os dados brutos de sexta-feira.")

    # Nova se√ß√£o de depura√ß√£o para o c√°lculo do Alvo
    st.subheader(f"üîç Depura√ß√£o do C√°lculo do Alvo ({asset_type_display_name})")
    debug_alvo_calc = st.checkbox(f"Exibir detalhes do c√°lculo do Alvo ({asset_type_display_name}) (selecione apenas um Ticker)", key=f"debug_alvo_{asset_type_display_name}")

    if debug_alvo_calc and len(sel) == 1:
        ticker_to_debug_base = sel[0]
        selected_row = df[df["Ticker"] == ticker_to_debug_base].iloc[0] # Pega a primeira (e √∫nica) linha selecionada

        st.write(f"**Detalhes para o Ticker:** {ticker_to_debug_base}")
        st.write(f"**Colunas de data identificadas:** {date_cols}")

        if len(date_cols) >= 4:
            last_cols_debug = date_cols[-4:]
            last_dates_debug = []
            for col in last_cols_debug:
                try:
                    d = dt.fromisoformat(str(col))
                except ValueError:
                    d = pd.to_datetime(col)
                last_dates_debug.append(d.date())

            st.write(f"**√öltimas 4 colunas para c√°lculo do Alvo:** {last_cols_debug}")
            st.write(f"**Datas correspondentes:** {[d.strftime('%Y-%m-%d') for d in last_dates_debug]}")

            ys_debug = [selected_row[c] for c in last_cols_debug]
            st.write(f"**Valores (ys) das colunas de data:** {ys_debug}")

            valid_indices_debug = [i for i, y in enumerate(ys) if pd.notnull(y)]
            st.write(f"**√çndices de valores v√°lidos para regress√£o:** {valid_indices_debug}")

            if len(valid_indices_debug) < 2:
                st.warning(f"Aten√ß√£o: Menos de 2 valores v√°lidos encontrados para o c√°lculo do Alvo. Isso resultar√° em 'None'. Verifique se as c√©lulas nas colunas de data do Excel para este Ticker est√£o preenchidas e s√£o num√©ricas.")
            else:
                st.info("Valores v√°lidos suficientes para o c√°lculo do Alvo.")
        else:
            st.warning(f"Aten√ß√£o: N√£o h√° colunas de data suficientes na planilha '{sheet_name}' para o c√°lculo do Alvo. M√≠nimo de 4 colunas de data necess√°rias.")
    elif debug_alvo_calc and len(sel) != 1:
        st.info("Por favor, selecione exatamente um Ticker para exibir os detalhes do c√°lculo do Alvo.")

    # Nova se√ß√£o de An√°lise do Ciclo do Spread
    st.subheader(f"üìä An√°lise do Ciclo do Spread (%) ({asset_type_display_name})")
    analyze_spread_cycle = st.checkbox(f"Analisar ciclo do Spread (%) para {asset_type_display_name} (selecione apenas um Ticker)", key=f"analyze_spread_cycle_{asset_type_display_name}")

    if analyze_spread_cycle and len(sel) == 1:
        ticker_to_analyze = sel[0]
        selected_row = df[df["Ticker"] == ticker_to_analyze]
        
        if not selected_row.empty and "Raw_Hist_Data" in selected_row.columns:
            hist_data = selected_row["Raw_Hist_Data"].iloc[0]
            
            if hist_data is not None and not hist_data.empty:
                st.write(f"Calculando Spread (%) hist√≥rico para {ticker_to_analyze}...")
                
                # Exibe um spinner enquanto o c√°lculo √© feito
                with st.spinner("Isso pode levar alguns segundos para hist√≥ricos longos..."):
                    historical_spread_series = calculate_historical_spread(hist_data.copy()) # Use uma c√≥pia para evitar modificar o DataFrame em cache

                if not historical_spread_series.empty:
                    # Identifica per√≠odos consecutivos onde o spread est√° acima de 1%
                    is_above_1 = (historical_spread_series > 1.0)
                    
                    # Agrupa valores True consecutivos
                    groups = is_above_1.astype(int).groupby((is_above_1 != is_above_1.shift()).cumsum())
                    
                    durations = []
                    for name, group in groups:
                        if group.iloc[0] == True: # Considera apenas grupos onde o spread estava acima de 1%
                            durations.append(len(group))

                    if durations:
                        avg_duration = np.mean(durations)
                        st.write(f"**M√©dia de dias consecutivos com Spread (%) acima de 1% para {ticker_to_analyze}:** {round(avg_duration, 2)} dias.")
                        st.write("---")
                        st.write("**Hist√≥rico de Spread (%) (√∫ltimos 30 dias com dados):**")
                        st.dataframe(historical_spread_series.tail(30))
                    else:
                        st.info(f"Nenhum per√≠odo com Spread (%) acima de 1% encontrado para {ticker_to_analyze} no hist√≥rico dispon√≠vel.")
                else:
                    st.warning(f"N√£o foi poss√≠vel calcular o Spread (%) hist√≥rico para {ticker_to_analyze}. Verifique os dados brutos.")
            else:
                st.warning(f"Dados hist√≥ricos brutos n√£o dispon√≠veis ou vazios para {ticker_to_analyze}.")
        else:
            st.warning(f"Dados hist√≥ricos para {ticker_to_analyze} n√£o dispon√≠veis para an√°lise do Spread (%).")
    elif analyze_spread_cycle and len(sel) != 1:
        st.info("Por favor, selecione exatamente um Ticker para analisar o ciclo do Spread (%).")

# --- Fun√ß√£o display_indices_tab (mantida como a √∫ltima vers√£o completa) ---
def display_indices_tab():
    """
    Exibe a aba de √≠ndices com o pre√ßo e varia√ß√£o do Ibovespa, Ouro, Petr√≥leo, D√≥lar e outros √≠ndices globais.
    """
    st.header("üìà Cota√ß√µes de √çndices e Commodities Relevantes")

    # Tickers do yfinance
    # A√ß√µes/Mercados
    ibov_ticker = "^BVSP"      # Ibovespa
    sp500_ticker = "^GSPC"     # S&P 500
    nasdaq_ticker = "^IXIC"    # Nasdaq Composite
    dow_jones_ticker = "^DJI"  # Dow Jones Industrial Average
    euro_stoxx_ticker = "^STOXX50E" # Euro Stoxx 50
    nikkei_ticker = "^N225"    # Nikkei 225

    # Commodities
    gold_ticker = "GC=F"       # Futuro do Ouro em USD
    oil_ticker = "CL=F"        # Futuro do Petr√≥leo WTI em USD
    silver_ticker = "SI=F"     # Futuro da Prata em USD
    natural_gas_ticker = "NG=F" # Futuro do G√°s Natural em USD
    copper_ticker = "HG=F"     # Futuro do Cobre em USD
    coffee_ticker = "KC=F"     # Futuro do Caf√© em USD
    wheat_ticker = "ZW=F"      # Futuro do Trigo em USD
    soybean_ticker = "ZS=F"    # Futuro da Soja em USD


    # C√¢mbio
    brl_usd_ticker = "BRL=X"   # D√≥lar Comercial (USD/BRL)

    # Busca os dados para cada ticker
    ibov_price, ibov_var = get_index_data(ibov_ticker)
    sp500_price, sp500_var = get_index_data(sp500_ticker)
    nasdaq_price, nasdaq_var = get_index_data(nasdaq_ticker)
    dow_jones_price, dow_jones_var = get_index_data(dow_jones_ticker)
    euro_stoxx_price, euro_stoxx_var = get_index_data(euro_stoxx_ticker)
    nikkei_price, nikkei_var = get_index_data(nikkei_ticker)

    gold_price, gold_var = get_index_data(gold_ticker)
    oil_price, oil_var = get_index_data(oil_ticker)
    silver_price, silver_var = get_index_data(silver_ticker)
    natural_gas_price, natural_gas_var = get_index_data(natural_gas_ticker)
    copper_price, copper_var = get_index_data(copper_ticker)
    coffee_price, coffee_var = get_index_data(coffee_ticker)
    wheat_price, wheat_var = get_index_data(wheat_ticker)
    soybean_price, soybean_var = get_index_data(soybean_ticker)
    
    brl_usd_price, brl_usd_var = get_index_data(brl_usd_ticker)

    data = {
        "Ativo/√çndice": [
            "Ibovespa (B3)",
            "S&P 500 (EUA)",
            "Nasdaq (EUA)",
            "Dow Jones (EUA)",
            "Euro Stoxx 50 (UE)",
            "Nikkei 225 (Jap√£o)",
            "Ouro (USD)",
            "Prata (USD)",
            "Petr√≥leo WTI (USD)",
            "G√°s Natural (USD)",
            "Cobre (USD)",
            "Caf√© (USD)",
            "Trigo (USD)",
            "Soja (USD)",
            "D√≥lar Comercial (USD/BRL)"
        ],
        "Cota√ß√£o Atual": [
            ibov_price, sp500_price, nasdaq_price, dow_jones_price, euro_stoxx_price, nikkei_price,
            gold_price, silver_price, oil_price, natural_gas_price, copper_price, coffee_price,
            wheat_price, soybean_price, brl_usd_price
        ],
        "Varia√ß√£o (%)": [
            ibov_var, sp500_var, nasdaq_var, dow_jones_var, euro_stoxx_var, nikkei_var,
            gold_var, silver_var, oil_var, natural_gas_var, copper_var, coffee_var,
            wheat_var, soybean_var, brl_usd_var
        ]
    }
    df_indices = pd.DataFrame(data)

    # Estiliza√ß√£o para a varia√ß√£o (verde para alta, vermelho para baixa)
    def highlight_variation(val):
        if pd.notnull(val):
            if val >= 0:
                return 'color: green; font-weight: bold'
            else:
                return 'color: red; font-weight: bold'
        return ''

    # Formata√ß√£o dos n√∫meros
    fmt = {
        "Cota√ß√£o Atual": "{:.2f}",
        "Varia√ß√£o (%)": "{:.2f}%"
    }

    styled_df_indices = df_indices.style.format(fmt).applymap(
        highlight_variation, subset=pd.IndexSlice[:, ['Varia√ß√£o (%)']]
    )
    
    if not df_indices.empty:
        st.dataframe(styled_df_indices, hide_index=True)
    else:
        st.info("N√£o foi poss√≠vel carregar os dados de todos os √≠ndices. Por favor, tente novamente mais tarde.")


# --- Fun√ß√£o Principal da Aplica√ß√£o Streamlit ---

def main():
    """
    Fun√ß√£o principal que organiza a interface do Streamlit.
    """
    try:
        # Informa√ß√µes de fuso hor√°rio na barra lateral (mantido para debug)
        st.sidebar.subheader("Informa√ß√µes de Fuso Hor√°rio (Debug)")
        tz_sp = pytz.timezone('America/Sao_Paulo')
        st.sidebar.write(f"Fuso hor√°rio do sistema (Render): {dt.now().astimezone().tzinfo}")
        st.sidebar.write(f"Data/hora UTC atual no Render: {dt.utcnow()}")
        st.sidebar.write(f"Data/hora local (do servidor) no Render: {dt.now()}")
        st.sidebar.write(f"Data/hora em S√£o Paulo (no Render): {dt.now(tz_sp)}")
        st.sidebar.write("---")

        # Cria as abas superiores para navega√ß√£o (REMOVENDO TAB_NOTICIAS)
        tab_stocks, tab_crypto, tab_etfs, tab_fiis, tab_indices = st.tabs(["A√ß√µes (B3)", "Criptomoedas", "ETFs", "FIIs", "√çndices"])

        # Bloco para A√ß√µes
        with tab_stocks:
            st.header(f"An√°lise de A√ß√µes da B3 (Aba '{SHEET_NAME_STOCKS}')")
            process_and_display_data(SHEET_NAME_STOCKS, "A√ß√µes")

        # Bloco para Criptomoedas
        with tab_crypto:
            st.header(f"An√°lise de Criptomoedas (Aba '{SHEET_NAME_CRYPTO}')")
            process_and_display_data(SHEET_NAME_CRYPTO, "Cripto")

        # Bloco para ETFs
        with tab_etfs:
            st.header(f"An√°lise de ETFs (Aba '{SHEET_NAME_ETFS}')")
            process_and_display_data(SHEET_NAME_ETFS, "ETFs")

        # Bloco para FIIs
        with tab_fiis:
            st.header(f"An√°lise de FIIs (Aba '{SHEET_NAME_FIIS}')")
            process_and_display_data(SHEET_NAME_FIIS, "FIIs")
            
        # Bloco para √çndices
        with tab_indices:
            display_indices_tab()

    except FileNotFoundError:
        st.error(f"‚ùå O arquivo '{EXCEL_PATH}' n√£o foi encontrado. Certifique-se de que ele est√° no mesmo diret√≥rio da aplica√ß√£o.")
    except Exception as e:
        st.error(f"‚ùå Erro ao processar dados: {e}. Por favor, verifique os logs para mais detalhes.")
        print(f"Erro detalhado: {e}")

if __name__ == "__main__":
    main()